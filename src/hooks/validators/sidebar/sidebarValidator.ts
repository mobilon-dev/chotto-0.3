/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö sidebar items
 */

export interface SidebarValidationError {
  path: string;
  message: string;
  value?: any;
}

export interface SidebarValidationResult {
  isValid: boolean;
  errors: SidebarValidationError[];
  warnings: SidebarValidationError[];
}

/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ sidebar item
 */
function validateSidebarItem(item: any, index: number): SidebarValidationError[] {
  const errors: SidebarValidationError[] = [];
  const path = `sidebarItems[${index}]`;

  if (typeof item !== 'object' || item === null) {
    errors.push({ path, message: 'SidebarItem –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º', value: item });
    return errors;
  }

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!item.itemId || typeof item.itemId !== 'string') {
    errors.push({ path: `${path}.itemId`, message: '–ü–æ–ª–µ itemId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', value: item.itemId });
  }

  if (!item.icon || typeof item.icon !== 'string') {
    errors.push({ path: `${path}.icon`, message: '–ü–æ–ª–µ icon –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', value: item.icon });
  }

  if (item.notificationCount === undefined || typeof item.notificationCount !== 'number') {
    errors.push({ path: `${path}.notificationCount`, message: '–ü–æ–ª–µ notificationCount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º', value: item.notificationCount });
  } else if (item.notificationCount < 0) {
    errors.push({ path: `${path}.notificationCount`, message: '–ü–æ–ª–µ notificationCount –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º', value: item.notificationCount });
  }

  if (item.selected === undefined || typeof item.selected !== 'boolean') {
    errors.push({ path: `${path}.selected`, message: '–ü–æ–ª–µ selected –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean', value: item.selected });
  }

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (item.name !== undefined && typeof item.name !== 'string') {
    errors.push({ path: `${path}.name`, message: '–ü–æ–ª–µ name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', value: item.name });
  }

  if (item.notificationColor !== undefined && typeof item.notificationColor !== 'string') {
    errors.push({ path: `${path}.notificationColor`, message: '–ü–æ–ª–µ notificationColor –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', value: item.notificationColor });
  }

  if (item.isFixedBottom !== undefined && typeof item.isFixedBottom !== 'boolean') {
    errors.push({ path: `${path}.isFixedBottom`, message: '–ü–æ–ª–µ isFixedBottom –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean', value: item.isFixedBottom });
  }

  if (item.isFixedTop !== undefined && typeof item.isFixedTop !== 'boolean') {
    errors.push({ path: `${path}.isFixedTop`, message: '–ü–æ–ª–µ isFixedTop –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean', value: item.isFixedTop });
  }

  return errors;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ sidebar items
 */
export function validateSidebarItems(items: any): SidebarValidationResult {
  const errors: SidebarValidationError[] = [];
  const warnings: SidebarValidationError[] = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(items)) {
    return {
      isValid: false,
      errors: [{ path: 'sidebarItems', message: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º', value: items }],
      warnings: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
  if (items.length === 0) {
    warnings.push({ path: 'sidebarItems', message: '–ú–∞—Å—Å–∏–≤ sidebar items –ø—É—Å—Ç–æ–π' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ itemId
  const itemIds = new Set<string>();
  items.forEach((item: any, index: number) => {
    if (item && typeof item === 'object' && item.itemId !== undefined) {
      if (itemIds.has(item.itemId)) {
        errors.push({ 
          path: `sidebarItems[${index}].itemId`, 
          message: '–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è itemId', 
          value: item.itemId 
        });
      } else {
        itemIds.add(item.itemId);
      }
    }
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ item
  items.forEach((item: any, index: number) => {
    errors.push(...validateSidebarItem(item, index));
  });

  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function getSidebarValidationReport(result: SidebarValidationResult): string {
  const lines: string[] = [];
  
  lines.push('=== –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò SIDEBAR ITEMS ===\n');
  
  if (result.isValid) {
    lines.push('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã!\n');
  } else {
    lines.push('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏!\n');
  }

  if (result.errors.length > 0) {
    lines.push(`\nüî¥ –û–®–ò–ë–ö–ò (${result.errors.length}):`);
    result.errors.forEach((error, index) => {
      lines.push(`  ${index + 1}. [${error.path}] ${error.message}`);
      if (error.value !== undefined) {
        lines.push(`     –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(error.value)}`);
      }
    });
  }

  if (result.warnings.length > 0) {
    lines.push(`\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (${result.warnings.length}):`);
    result.warnings.forEach((warning, index) => {
      lines.push(`  ${index + 1}. [${warning.path}] ${warning.message}`);
      if (warning.value !== undefined) {
        lines.push(`     –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(warning.value)}`);
      }
    });
  }

  lines.push('\n' + '='.repeat(42));
  
  return lines.join('\n');
}


